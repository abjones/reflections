When would you want to use a remote repository rather than keeping all your work local?

    Remote repositories are great for group projects where you want to track in the 
    same location and all work is done remotely. Further, a remote repository provides
    some additional security for hard drive faults, backing it up "in the cloud" vice
    to your local workstation. 
    
Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

		The remote repository has other users interacting with it. The changes
		they make may not play nice with the new functionality that I am 
		locally developing. Rather than deal with all of the changes now as a 
		mini merge, I'd rather they stay present on the online repository until
		I am either ready to commit and push my changes or commit and pull from
		the repository to ensure compatibility.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

		Forks are clones that happen within the context of GitHub itself. Forks
		are useful for copying repositories in the GitHub repository without
		having to download to a local machine and push to your account directly.
		Forks also build a user's and repository's reputation by counting the 
		number of times it has been forked, giving a psuedo value to the repo.
		Clones are simply copies of repositories into a new location. You can 
		clone a GitHub repository to your local machine, clone a local repo to 
		another local location, or clone your repo to GitHub. 
		Branches occur when a user, starting from a commit, wants to create a 
		different path for tracking changes other than the master path. This is
		useful for demonstrating new features while maintaining a set of 
		production code that is always working. Branches can then be merged into
		the production (master) code when ready for testing.

What is the benefit of having a copy of the last known state of the remote stored locally?

		This ensures that you can work off of the most recent changes and avoid
		out-of-sync status while others are developing. You are kept up to date,
		and ensure all local development maintains the most recent changes. Long
		term, this would help avoid conflicts before they emerge at the merge 
		step.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

		Collaboration would involve emails and messaging for all changes, with
		files tranferred via email, hard drive, or disk. The changes would be 
		difficult to identify without developing a readme for each change you
		make, and communicating with the rest of the team would be near 
		impossible to keep everyone up to date. The only "easier" part is that
		it would be easier to forego notifying the team of all changes as they
		were made, as conceivably only larger changes would ever be sent around.