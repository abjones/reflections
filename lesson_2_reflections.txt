What happens when you initialize a repository? Why do you need to do it?
		
		Initializing a repository creates a new .git directory within the 
		repository that will store all of your git commit histories for the
		directory. This is how you set up your first tracking of the 
		directory. It must be done so that git knows what to track and when.
		The initilization does not include the first commit, so the user
		will need to be sure to create a new commit when ready to start 
		tracking the files.

How is the staging area different from the working directory and the 
repository? What value do you think it offers?

		The staging area allows you to explicitly identify what files and 
		changes should be added to your git repository. This is more detailed
		than working only with the information from the working directory,
		and it allows increased control over the information being tracked.
		You can thus ensure your commits are logically separated, even if
		you have multiple files in the working directory that are changing.

How can you use the staging area to make sure you have one commit per 
logical change?

		The staging area allows you to add a single changed file to your 
		commit and maintain the other changes in your working directory as
		separate files. When you are ready to commit one of the other changes
		in the working directory, you simply use git add to move that to the
		changing area, then commit with a meaningful message.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

		Branches allow you to maintain a master set of code while 
		experimenting with experimental features or different "modes" of the
		game (such as language settings or easy/hard modes). Branches ensure
		you can maintain core code development, and when the new branches are
		complete or ready for testing, they can be merged with the master to 
		bring the code base back together.

How do the diagrams help you visualize the branch structure?

		Diagrams easily identify where branch structures began and what 
		commits have happened since the last branch. Further, it helps to 
		identify what commits are available to each branch, and gives
		context for the number of changes that have occurred on the local 
		branch compared to the master or other branches. For readability,
		the diagram puts this all into simple context vice pouring thru the 
		git logs of all of the branches independently.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

		Merging two branches together collapses them into the same branch,
		aligning all commits within each branch by time. You can further
		delete the name of the secondary branch at this point, as all of the
		commits are now represented by the merged branch. This allows all 
		commits to be found via the main branch, as there are no longer any
		secondary branches to track.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges 
manually?

		Automatic merging provides a simple path to resolve minor changes in the 
		branches, but may create some issues where lines are changed that don't
		reflect the intended change between branches. In this case, git notifies
		you that the conflicts are present and allows for the user to correct the
		issues within the merge process. Having to always manually merge branches
		would be time consuming and inefficient when merges are simple and non-
		conflicting.